apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Chart.Name }}-ss"
spec:
  serviceName: "{{ .Values.SERVICENAME }}"
  replicas: {{ .Values.K8S_REPLICAS }}
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.K8S_MAX_UNAVAIL }}
      maxSurge: {{ .Values.K8S_MAX_SURGE }}
  selector:
    matchLabels:
      app: back-end-game
  template:
    metadata:
      labels:
        app: back-end-game
    spec:
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "{{ .Values.TOLERATIONS }}"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: name
                operator: In
                values:
                - "{{ .Values.NODENAME }}"
      terminationGracePeriodSeconds: 10
      containers:
        - name: "{{ .Values.mongo.name }}"
          image: "{{ .Values.mongo.docker_image }}"
          ports:
            - containerPort: {{ .Values.mongo.port }}
          volumeMounts:
            - name: mongo-game-storage
              mountPath: "{{ .Values.mongo.location }}"
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.SECRET }}"
                  key: username

            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.SECRET }}"
                  key: password

        - name: "{{ .Values.game.name }}"
          image: "{{ .Values.game.docker_image }}"
          ports:
            - containerPort: {{ .Values.game.port }}
          volumeMounts:
            - name: claim-backend-game
              mountPath: "{{ .Values.game.location }}"
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.SECRET }}"
                  key: username
            - name: DB_PW
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.SECRET }}"
                  key: password

  volumeClaimTemplates:
  - metadata:
      name: mongo-game-storage
      annotations:
        volume.beta.kubernetes.io/storage-class: "fast4"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ .Values.mongo.k8s_req.storage }}"
          cpu: "{{ .Values.mongo.k8s_req.cpu }}"
          memory: "{{ .Values.mongo.k8s_req.memory }}"
        limits:
          storage: "{{ .Values.mongo.k8s_limit.storage }}"
          cpu: "{{ .Values.mongo.k8s_limit.cpu }}"
          memory: "{{ .Values.mongo.k8s_limit.memory }}"


  - metadata:
      name: claim-backend-game
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "fast1"
      resources:
        requests:
          storage: "{{ .Values.game.k8s_req_mem }}"

